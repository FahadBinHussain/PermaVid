fn main() {
  // Run the tauri build process
  tauri_build::build()
}

fn create_icons() {
  use std::fs;
  use std::path::Path;

  // Windows ICO file - This is a valid minimal ICO file
  let ico_path = Path::new("icons/icon.ico");
  if !ico_path.exists() || is_placeholder(ico_path) {
    // A valid minimal Windows ICO file (binary data for a 1x1 pixel icon)
    let ico_bytes = [
      0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 
      0x18, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x28, 0x00, 
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
      0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ];
    
    fs::create_dir_all("icons").unwrap_or_default();
    fs::write(ico_path, &ico_bytes).unwrap_or_default();
  }
  
  // macOS ICNS file
  let icns_path = Path::new("icons/icon.icns");
  if !icns_path.exists() || is_placeholder(icns_path) {
    // A minimal valid ICNS file (binary data)
    // In a real scenario, you would want to use a proper ICNS file
    // Just creating a placeholder for now
    fs::create_dir_all("icons").unwrap_or_default();
    fs::write(icns_path, b"icns\0\0\0\0").unwrap_or_default();
  }
  
  // PNG files for Linux
  for png_name in &["32x32.png", "128x128.png", "128x128@2x.png"] {
    let png_path = Path::new("icons").join(png_name);
    if !png_path.exists() || is_placeholder(&png_path) {
      // A minimal valid 1x1 transparent PNG file (binary data)
      let minimal_png = [
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
        0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
        0x08, 0x04, 0x00, 0x00, 0x00, 0xB5, 0x1C, 0x0C, 0x02, 0x00, 0x00, 0x00,
        0x0B, 0x49, 0x44, 0x41, 0x54, 0x08, 0xD7, 0x63, 0x60, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x01, 0xE2, 0x21, 0xBC, 0x33, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
      ];
      
      fs::create_dir_all("icons").unwrap_or_default();
      fs::write(&png_path, &minimal_png).unwrap_or_default();
    }
  }
}

fn is_placeholder(path: &std::path::Path) -> bool {
  if let Ok(content) = std::fs::read_to_string(path) {
    // Check if the file is just an HTML comment placeholder
    content.trim().starts_with("<!--") && content.trim().ends_with("-->")
  } else {
    false
  }
} 